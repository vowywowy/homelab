<<<<<<< HEAD
---
version: '3.7'

x-default-logging: &default-logging
  logging:
    options:
      max-size: 10m
      max-file: 5

x-default-global-deploy: &default-global-deploy
  mode: global
  update_config:
    failure_action: rollback
  rollback_config:
    parallelism: 0

x-default-single-replica-deploy: &default-single-replica-deploy
  replicas: 1
  update_config:
    failure_action: rollback
  placement:
      constraints: [node.role == manager]

x-default-env-file: &default-env-file
  env_file: [./.env/common.env]

services:
  traefik:
    image: traefik
    <<: *default-logging
    deploy:
      <<: *default-single-replica-deploy
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
    networks: 
      - traefik-port-net
      - traefik-qb-net
      - traefik-sonarr-net
      - traefik-radarr-net
      - traefik-jackett-net
      - traefik-plex-net
    ports:
      - "80:80"
      - "8080:8080"
    command: 
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
  portainer_agent:
    image: portainer/agent
    <<: *default-logging
    deploy:
      <<: *default-global-deploy    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks: [port-net]
  portainer:
    image: portainer/portainer
    <<: *default-logging
    deploy:
      <<: *default-single-replica-deploy
      labels:
        - "traefik.enable=true"
        # adding a slash to the end
        - "traefik.http.routers.portainer.entrypoints=web"
        - "traefik.http.routers.portainer.rule=PathPrefix(`/portainer`)"
        - "traefik.http.middlewares.portainer-redirect.redirectregex.regex=^(.*)/portainer$$"
        - "traefik.http.middlewares.portainer-redirect.redirectregex.replacement=$$1/portainer/"
        - "traefik.http.middlewares.portainer-strip.stripprefix.prefixes=/portainer/"
        - "traefik.http.routers.portainer.middlewares=portainer-strip,portainer-redirect"    
        - "traefik.http.services.potainer.loadbalancer.server.port=9000"
        - "traefik.docker.network=homelab_traefik-port-net"
    volumes:
      - ./portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    networks: 
      - port-net
      - traefik-port-net
    command: -H tcp://tasks.portainer_agent:9001 --tlsskipverify
  shepherd:
    image: mazzolino/shepherd
    <<: *default-logging
    deploy:
      <<: *default-single-replica-deploy    
    environment: [SLEEP_TIME="8h"]
    volumes: [/var/run/docker.sock:/var/run/docker.sock]
    networks: [shepherd-net]
  qbittorrent:
    image: linuxserver/qbittorrent
    <<: *default-logging
    deploy:
      <<: *default-single-replica-deploy
      labels:
        - "traefik.enable=true"
        # adding a slash to the end
        - "traefik.http.routers.qb.entrypoints=web"
        - "traefik.http.routers.qb.rule=PathPrefix(`/qb`)"
        - "traefik.http.middlewares.qb-redirect.redirectregex.regex=^(.*)/qb$$"
        - "traefik.http.middlewares.qb-redirect.redirectregex.replacement=$$1/qb/"
        - "traefik.http.middlewares.qb-strip.stripprefix.prefixes=/qb/"
        # this was some shit
        - "traefik.http.middlewares.qb-headers.headers.customrequestheaders.X-Frame-Options=SAMEORIGIN"
        - "traefik.http.middlewares.qb-headers.headers.customrequestheaders.Referer="
        - "traefik.http.middlewares.qb-headers.headers.customrequestheaders.Origin="
        - "traefik.http.routers.qb.middlewares=qb-strip,qb-redirect,qb-headers"
        - "traefik.http.services.qb.loadbalancer.server.port=8080"
        - "traefik.http.services.qb.loadbalancer.passhostheader=false"
        - "traefik.docker.network=homelab_traefik-qb-net"
    <<: *default-env-file
    volumes:
      - ./qbittorrent:/config
      - ./downloads:/downloads
    networks: 
      - qb-sonarr-net
      - qb-radarr-net
      - traefik-qb-net
  smb:
    image: dperson/samba
    <<: *default-logging
    deploy:
      <<: *default-single-replica-deploy 
    environment: 
      - USERID=1000
      - GROUPID=1000
    volumes:
      - ./downloads:/downloads
      - ./torrents:/torrents
    networks: [smb-net]
    ports:
      - "139:139"
      - "445:445"
      - "137-138:137-138/udp"
    command: -n -r -p -s "downloads;/downloads;yes;no" -s "torrents;/torrents;yes;no"
  plex:
    image: plexinc/pms-docker:public
    <<: *default-logging
    deploy:
      <<: *default-single-replica-deploy
      labels: 
        - "traefik.enable=true"
        - "traefik.http.routers.plex.entrypoints=web"
        - "traefik.http.routers.plex.rule=PathPrefix(`/plex`) || PathPrefix(`/web`)"
        - "traefik.http.middlewares.plex-redirect.redirectregex.regex=^(.*)/(plex|web)$$"
        - "traefik.http.middlewares.plex-redirect.redirectregex.replacement=$$1/web/"
        - "traefik.http.routers.plex.middlewares=plex-redirect"
        - "traefik.http.services.plex.loadbalancer.server.port=32400"
        - "traefik.docker.network=homelab_traefik-plex-net"
    environment:
      - PLEX_UID=1000
      - PLEX_GID=1000
      - PLEX_CLAIM=claim-qxhyy5LBV9fyPH4TejRp
      - ADVERTISE_IP=http://10.0.0.36:32400/
    volumes: 
      - ./downloads:/data
      - ./plex:/config
    networks: [traefik-plex-net]
    ports:
      - "32400:32400"
      - "3005:3005"
      - "8324:8324"
      - "32469:32469"
      - "32410:32410/udp"
      - "32412-32414:32412-32414/udp"
      - "1900:1900/udp"
  sonarr:
    image: linuxserver/sonarr
    <<: *default-logging
    deploy:
      <<: *default-single-replica-deploy
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.sonarr.entrypoints=web"
        - "traefik.http.routers.sonarr.rule=PathPrefix(`/sonarr`)"    
        - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
        - "traefik.docker.network=homelab_traefik-sonarr-net"
    <<: *default-env-file
    volumes:
      - ./sonarr:/config
      - ./downloads:/tv
      - ./downloads:/downloads
    networks: 
      - qb-sonarr-net
      - jackett-sonarr-net
      - traefik-sonarr-net
    #ports: ["8989:8989"]
  radarr:
    image: linuxserver/radarr
    <<: *default-logging
    deploy:
      <<: *default-single-replica-deploy
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.radarr.entrypoints=web"
        - "traefik.http.routers.radarr.rule=PathPrefix(`/radarr`)"    
        - "traefik.http.services.radarr.loadbalancer.server.port=7878"
        - "traefik.docker.network=homelab_traefik-radarr-net"
    <<: *default-env-file
    volumes:
      - ./radarr:/config
      - ./downloads:/movies
      - ./downloads:/downloads
    networks:
      - qb-radarr-net 
      - jackett-radarr-net
      - traefik-radarr-net
    #ports: ["7878:7878"]
  jackett:
    image: linuxserver/jackett
    <<: *default-logging
    deploy:
      <<: *default-single-replica-deploy 
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.jackett.entrypoints=web"
        - "traefik.http.routers.jackett.rule=PathPrefix(`/jackett`)"    
        - "traefik.http.services.jackett.loadbalancer.server.port=9117"
        - "traefik.docker.network=homelab_traefik-jackett-net"
    <<: *default-env-file
    volumes:
      - ./jackett:/config
      - ./torrents:/downloads
    networks: 
      - jackett-radarr-net
      - jackett-sonarr-net
      - traefik-jackett-net
    #ports: ["9117:9117"]

networks:
  port-net:
  shepherd-net:
  smb-net:
  qb-sonarr-net:
  qb-radarr-net:
  jackett-sonarr-net:
  jackett-radarr-net:
  traefik-port-net:
  traefik-qb-net:
  traefik-sonarr-net:
  traefik-radarr-net:
  traefik-jackett-net:
  traefik-plex-net:

#volumes:
#  portainer:
#  downloads:
#  qbittorrent:
#  torrents:
#  plex:
#  sonarr:
#  radarr:
#  jackett:

=======
---
version: '3.7'
services:
  portainer:
    container_name: portainer
    image: portainer/portainer
    networks:
      - port-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer:/data
    command: -H unix:///var/run/docker.sock
    restart: always

  watchtower:
    container_name: watchtower
    image: v2tec/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    #check at 3am only
    command: --cleanup --schedule "0 0 3 * * *"
    restart: always

#  netdata:
#    container_name: netdata
#    image: titpetric/netdata
#    cap_add:
#      - SYS_PTRACE
#    networks:
#      - data-net
#    volumes:
#      - /proc:/host/proc:ro
#      - /sys:/host/sys:ro
#      - /var/run/docker.sock:/var/run/docker.sock
#      - ./netdata:/etc/netdata/python.d
#    restart: always

  nginx:
    image: nginx:alpine
    container_name: nginx
    networks:
      - port-net
#      - data-net
      - son-net
      - rad-net
      - plex-net
      - jack-net
#      - pi-net
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/homelab.conf:/etc/nginx/conf.d/default.conf
    restart: always

  qbittorrent:
    image: linuxserver/qbittorrent
    container_name: qbittorrent
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Toronto
      - UMASK_SET=022
      - WEBUI_PORT=8080
    volumes:
      - ./qbittorrent/config:/config
      - ./downloads:/downloads
    networks:
      - son-net
      - rad-net
    restart: always
  
  smb:
    image: dperson/samba
    container_name: smb
    environment:
      - TZ=EST5EDT
    volumes:
      - ./downloads:/downloads
      - ./torrents:/torrents
    networks: 
      - smb-net
    ports:
      - "139:139"
      - "445:445"
      - "137-138:137-138/udp"
    command: -n -p -s "downloads;/downloads;yes;no" -s "torrents;/torrents;yes;no"
    restart: always

  plex:
    image: plexinc/pms-docker:public
    container_name: plex
    volumes: 
      - ./downloads:/data
      - ./plex/transcode:/transcode
      - ./plex/config:/config
    networks:
      - plex-net
    ports:
      - "32400:32400"
      - "3005:3005"
      - "8324:8324"
      - "32469:32469"
      - "32410:32410/udp"
      - "32412-32414:32412-32414/udp"
      - "1900:1900/udp"
    environment:
      - TZ=America/Toronto
      - PLEX_UID=1000
      - PLEX_GID=1000
      - PLEX_CLAIM=claim-qxhyy5LBV9fyPH4TejRp
      - ADVERTISE_IP=http://10.0.0.42:32400/
    
  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Toronto
    volumes:
      - ./sonarr:/config
      - ./downloads:/tv
      - ./downloads:/downloads
    networks:
      - son-net
    ports:
      - "8989:8989"
    restart: always
  
  radarr:
    image: linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Toronto
    volumes:
      - ./radarr:/config
      - ./downloads:/movies
      - ./downloads:/downloads
    networks:
      - rad-net
    ports:
      - "7878:7878"
    restart: always
  
  jackett:
    image: linuxserver/jackett
    container_name: jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Toronto
    volumes:
      - ./jackett:/config
      - ./torrents:/downloads
    networks:
      - jack-net
      - son-net
      - rad-net
    restart: always
  
  #minecraft:
  #  image: itzg/minecraft-server
  #  container_name: minecraft
  #  environment:
  #    - EULA=TRUE
  #  volumes:
  #    - ./minecraft:/data
  #  networks:
  #    - mine-net
  #  ports: 
  #    - "25565:25565"
  
  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    environment: 
      - TZ=America/Toronto
      - DNS1=208.67.220.222
      - DNS2=208.67.222.220
    volumes:
      - ./pihole/config:/etc/pihole
      - ./pihole/dnsmasq:/etc/dnsmasq.d
    dns:
      - 127.0.0.1
    networks:
      - jack-net
      - son-net
      - rad-net
      - plex-net
    ports:
      - "53:53"
      - "53:53/udp"
      - "67:67"
      - "67:67/udp"
    restart: always

    
networks:
  port-net:
    driver: bridge
#  data-net:
#    driver: bridge
  smb-net:
    driver: bridge
  plex-net:
    driver: bridge
  son-net:
    driver: bridge
  rad-net:
    driver: bridge
  jack-net:
    driver: bridge
#  mine-net:
#    driver: bridge
#  pi-net:
#    driver: bridge
>>>>>>> master

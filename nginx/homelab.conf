upstream netdata {
    server netdata:19999;
    keepalive 64;
}

upstream portainer {
    server portainer:9000;
}

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
    listen       80;
    server_name  localhost;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    location = /netdata {
        return 301 /netdata/;
    }

   location ~ /netdata/(?<ndpath>.*) {
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass_request_headers on;
        proxy_set_header Connection "keep-alive";
        proxy_store off;
        proxy_pass http://netdata/$ndpath$is_args$args;
        gzip on;
        gzip_proxied any;
        gzip_types *;
    }

    location = /portainer {
        return 301 /portainer/;
    }

    location /portainer/ {
    	proxy_http_version 1.1;
    	proxy_set_header Connection "";
    	proxy_pass http://portainer/;
    }

    location /portainer/api/websocket/ {
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_http_version 1.1;
        proxy_pass http://portainer/api/websocket/;
    }

	location = /qb {
        return 301 /qb/;
    }

	location /qb/ {
		proxy_pass              http://qbittorrent:8080/;
		proxy_set_header        X-Forwarded-Host        $server_name:$server_port;
		proxy_hide_header       Referer;
		proxy_hide_header       Origin;
		proxy_set_header        Referer                 '';
		proxy_set_header        Origin                  '';
		add_header              X-Frame-Options         "SAMEORIGIN"; # see note
	}

    location /sonarr {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_redirect off;
        proxy_set_header Host $http_host;
        proxy_pass  http://sonarr:8989;
    }

    location /radarr {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_redirect off;
        proxy_set_header Host $http_host;
        proxy_pass  http://radarr:7878;
    }

    location /plex/ {
        gzip on;
        gzip_vary on;
        gzip_min_length 1000;
        gzip_proxied any;
        gzip_types text/plain text/css text/xml application/xml text/javascript application/x-javascript image/svg+xml;
        gzip_disable "MSIE [1-6]\.";

        proxy_pass http://plex:32400/;
        client_max_body_size 10m;
        client_body_buffer_size 128k;
        proxy_bind $server_addr;
        proxy_buffers 32 4k;
        proxy_cache_bypass $cookie_session;
        proxy_connect_timeout 240;
        proxy_hide_header X-Frame-Options;
        proxy_http_version 1.1;
        proxy_no_cache $cookie_session;
        proxy_read_timeout 240;
        proxy_redirect  off;
        proxy_buffering off;
        proxy_send_timeout 240;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $server_addr;
        proxy_set_header Referer $server_addr;
        proxy_set_header Origin $server_addr;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade  $http_upgrade;
        send_timeout 5m;

        # Plex headers
        proxy_set_header X-Plex-Client-Identifier $http_x_plex_client_identifier;
        proxy_set_header X-Plex-Device $http_x_plex_device;
        proxy_set_header X-Plex-Device-Name $http_x_plex_device_name;
        proxy_set_header X-Plex-Platform $http_x_plex_platform;
        proxy_set_header X-Plex-Platform-Version $http_x_plex_platform_version;
        proxy_set_header X-Plex-Product $http_x_plex_product;
        proxy_set_header X-Plex-Token $http_x_plex_token;
        proxy_set_header X-Plex-Version $http_x_plex_version;
        proxy_set_header X-Plex-Nocache $http_x_plex_nocache;
        proxy_set_header X-Plex-Provides $http_x_plex_provides;
        proxy_set_header X-Plex-Device-Vendor $http_x_plex_device_vendor;
        proxy_set_header X-Plex-Model $http_x_plex_model;

    }
    if ($http_referer ~ /plex/) {
        rewrite ^/web/(.*) /plex/web/$1? redirect;
    }

    location /stub_status {
        stub_status on;
        access_log off;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}
